/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsJSONValue } from "../../validators";
import {
  IsOptional,
  IsNumber,
  Min,
  Max,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { PaymentUpdateManyWithoutRidesInput } from "./PaymentUpdateManyWithoutRidesInput";
import { Type } from "class-transformer";
import { EnumRideRideStatus } from "./EnumRideRideStatus";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class RideUpdateInput {
  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  dropoffLocation?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  fare?: number | null;

  @ApiProperty({
    required: false,
    type: () => PaymentUpdateManyWithoutRidesInput,
  })
  @ValidateNested()
  @Type(() => PaymentUpdateManyWithoutRidesInput)
  @IsOptional()
  @Field(() => PaymentUpdateManyWithoutRidesInput, {
    nullable: true,
  })
  payments?: PaymentUpdateManyWithoutRidesInput;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  pickupLocation?: InputJsonValue;

  @ApiProperty({
    required: false,
    enum: EnumRideRideStatus,
  })
  @IsEnum(EnumRideRideStatus)
  @IsOptional()
  @Field(() => EnumRideRideStatus, {
    nullable: true,
  })
  rideStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { RideUpdateInput as RideUpdateInput };
